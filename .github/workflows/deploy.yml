name: Build and Deploy Traditional App

on:
  push:
    branches:
      - main
    paths:
      - ec2-codedeploy/**
  pull_request:

env:
  applicationfolder: ec2-codedeploy/spring-boot-hello-world-example
  AWS_REGION: us-east-1
  S3BUCKET: githubcodedeployec2-webappdeploymentbucket-1w9iiu65ed1yn


jobs:
  build:
    name: Build and Package
    runs-on: ubuntu-20.04
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
        name: Checkout Repository

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.IAMROLE_GITHUB }}
          role-session-name: GitHub-Action-Role
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Amazon Corretto
        uses: actions/setup-java@v3
        with:
          distribution: corretto
          java-version: 17

      - name: chmod
        run: chmod -R +x ./.github

      - name: pwd
        run: pwd

      - name: ls
        run: ls

      - name: Build and Package Maven
        id: package
        working-directory: ${{ env.applicationfolder }}
        run: $GITHUB_WORKSPACE/.github/scripts/build.sh

      - name: Upload Artifact to s3
        working-directory: ${{ env.applicationfolder }}/target
        run: aws s3 cp *.war s3://${{ env.S3BUCKET }}/
        
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: Dev
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.IAMROLE_GITHUB }}
          role-session-name: GitHub-Action-Role
          aws-region: ${{ env.AWS_REGION }}
      - name: Create Deployment
        id: create-deployment
        run: |
          echo "Deploying branch ${{ env.GITHUB_REF }} to ${{ github.event.inputs.environment }}"
          commit_hash=`git rev-parse HEAD`
          deployment_id=`aws deploy create-deployment --application-name CodeDeployAppNameWithASG --deployment-group-name CodeDeployGroupName --github-location repository=$GITHUB_REPOSITORY,commitId=$commit_hash --ignore-application-stop-failures` >> $GITHUB_OUTPUT
      - name: Check Deployment Status
        run: |
          echo ${{ steps.create-deployment.outputs.deployment_id }}
          aws deploy get-deployment --deployment-id $deployment_id
          exit 0
